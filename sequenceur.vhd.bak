ibrary IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.up_pack.all;
entity sequenceur is
port( clk, reset : in std_logic;
accz, acc15 : in std_logic;
opcode : in OPCODE;
raz : out std_logic;
selA : out std_logic_vector(1 downto 0);
selB : out std_logic;
selC : out std_logic_vector(1 downto 0);
acc_ld, pc_ld, r_ld, ir_ld, acc_oe : out std_logic;
alufs : out ALU_FCTS;
memrq, rnw : out std_logic
);
end sequenceur;
architecture arch_seq of sequenceur is
type me_states is (INIT, FETCH, EXECUTE, STOP);
signal etat_cr, etat_sv : me_states ;
begin
process( clk , reset)
begin
if reset='1' then etat_cr <= INIT;
elsif rising_edge(clk) then etat_cr <= etat_sv;
end if;
end process;
process(etat_cr, opcode, accz, acc15)
begin
etat_sv <= etat_cr; raz <= '0'; selA <= "00"; selB <= '0'; selC <= "00";
acc_ld <= '0'; acc_oe <= '0';
pc_ld <= '0'; ir_ld <= '0'; r_ld<='0';
alufs <= ALU_B_INC;
memrq <= '1'; rnw <='1';
case etat_cr is
when INIT =>
etat_sv <= FETCH;
raz <= '1';
when FETCH =>
etat_sv <= EXECUTE;
ir_ld <= '1'; -- load IR with data on the data bus
alufs <= ALU_B_INC; -- op = B+1
pc_ld <= '1'; -- load PC with PC+1
when EXECUTE =>
case opcode is
when OP_LDA => -- LDA s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1';
selC <= "01"; -- data bus to ACC
alufs <= ALU_B; -- op = B
acc_ld <= '1'; -- load data in accumulator
etat_sv <= FETCH;
when OP_STO => -- STO s
selA <= "11"; -- IR[mem] on addr bus
acc_oe <= '1'; -- output accumulator on data bus
rnw <= '0'; -- select write to memory
etat_sv <= FETCH;
when OP_ADD => -- ADD s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1'; -- data to B alu entry
alufs <= ALU_ADD; -- op = A+B
acc_ld <= '1'; -- load result in accumulator
etat_sv <= FETCH;
when OP_SUB => -- SUB s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1'; -- data to B alu entry
alufs <= ALU_SUB; -- op = A-B
acc_ld <= '1'; -- load result in accumulator
etat_sv <= FETCH;
when OP_JMP => -- JMP s
selA <= "11"; -- IR[mem] on addr bus
alufs <= ALU_B; -- op = B
pc_ld <= '1'; -- load PC with IR[mem]
etat_sv <= FETCH; -- 0 cycle JMP
selA <= "11";ir_ld <= '1';pc_ld <= '1';
when OP_JGE => -- JGE s
if acc15='0' then -- jump, else nothing
selA <= "11"; -- IR[mem] on addr bus
alufs <= ALU_B; -- op = B
pc_ld <= '1'; -- load PC with IR[mem]
end if;
etat_sv <= FETCH;
-- 0 cycle JGE
if acc15='0' then
selA <= "11";
end if;
ir_ld <= '1';pc_ld <= '1';
when OP_JNE => -- JNE s
if accz='0' then -- jump, else nothing
selA <= "11"; -- IR[mem] on addr bus
alufs <= ALU_B; -- op = B
pc_ld <= '1'; -- load PC with IR[mem]
end if;
etat_sv <= FETCH;
-- 0 cycle JNE
if accz='0' then
selA <= '1';
end if;
ir_ld <= '1';pc_ld <= '1';
when OP_STP => -- STP
etat_sv <= STOP;
when OP_AND => -- AND s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1'; -- data to B alu entry
alufs <= ALU_AND; -- op = A and B
acc_ld <= '1'; -- load result in accumulator
etat_sv <= FETCH;
when OP_OR => -- OR s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1'; -- data to B alu entry
alufs <= ALU_OR; -- op = A or B
acc_ld <= '1'; -- load result in accumulator
etat_sv <= FETCH;
when OP_XOR => -- XOR s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1'; -- data to B alu entry
alufs <= ALU_XOR; -- op = A xor B
acc_ld <= '1'; -- load result in accumulator
etat_sv <= FETCH;
when OP_LDR => -- LDR s
selA <= "11"; -- IR[mem] on addr bus
selB <= '1'; -- data to B alu entry
alufs <= ALU_B; -- op = B
r_ld <= '1'; -- load result in accumulator
etat_sv <= FETCH;
when others =>
etat_sv <= STOP;
end case;
when STOP => etat_sv <= STOP;
end case;
end process;
end arch_seq;